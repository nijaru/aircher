# Aircher Configuration Example
# This file demonstrates all available configuration options
# Copy to .aircher/config.toml in your project or ~/.config/aircher/config.toml for user defaults

[project]
name = "my-awesome-project"
path = "/path/to/project"
type = "go"  # auto-detected: go, node, python, rust, etc.

[interface]
mode = "interactive"           # interactive, non-interactive, auto
output_format = "text"         # text, json, markdown
vim_mode = false              # Enable vim-like keybindings
color_theme = "auto"          # auto, dark, light, catppuccin
show_thinking = true          # Show AI thinking indicators
show_token_count = true       # Display token usage in status bar
show_cost = true              # Display cost information
show_context_panel = true     # Show context sidebar by default
markdown_rendering = true     # Rich markdown formatting
syntax_highlighting = true    # Code syntax highlighting
streaming_animation = true    # Smooth streaming animations
panel_width = 30             # Context panel width (characters)

# LLM Provider Configuration
[providers]
default = "openai"            # Default provider: openai, claude, gemini, ollama

[providers.openai]
api_key_env = "OPENAI_API_KEY"
model = "gpt-4"
max_tokens = 4096
base_url = ""                 # Optional: custom endpoint
temperature = 0.7
timeout = "30s"

[providers.claude]
api_key_env = "ANTHROPIC_API_KEY"
model = "claude-3-sonnet-20240229"
max_tokens = 4096
temperature = 0.7
timeout = "30s"

[providers.gemini]
api_key_env = "GOOGLE_API_KEY"
model = "gemini-pro"
project = ""                  # Optional: GCP project ID
max_tokens = 4096
temperature = 0.7

[providers.ollama]
base_url = "http://localhost:11434"
model = "llama2"
keep_alive = "5m"
timeout = "60s"

# Context Management Settings
[context_management]

[context_management.auto_compaction]
enabled = true                # Automatically compact conversations
task_completion_trigger = true    # Compact when task is completed
context_shift_trigger = true      # Compact when context changes
quality_degradation_trigger = true # Compact when quality drops
token_threshold = 8000            # Compact when exceeding tokens
preserve_messages = 5             # Always keep last N messages

[context_management.file_relevance]
max_files = 20               # Maximum files to include in context
threshold = 0.3              # Minimum relevance score (0.0-1.0)
include_dependencies = true   # Include related files
historical_weight = 0.7      # Weight for file access history
decay_rate = 0.1            # How quickly relevance decays

# Web Search Configuration
[search]
enabled = true               # Enable autonomous web search
auto_search = true          # Automatically search when needed
providers = ["brave"]       # brave, duckduckgo, custom
brave_api_key_env = "BRAVE_API_KEY"
max_results = 5             # Maximum search results to process
cache_duration = "1h"       # Cache search results
show_search_status = true   # Show search indicators in TUI

# Project Memory System
[memory]
project_file = "AIRCHER.md"     # Project memory file name
auto_save_decisions = true       # Automatically save important decisions
sync_interval = "5m"            # How often to sync memory to database
instant_memory_prefix = "#"     # Prefix for instant memory additions

# Cost Tracking
[costs]
monthly_budget = 100.0      # Monthly spending limit (USD)
daily_limit = 10.0          # Daily spending limit (USD)
alert_threshold = 0.8       # Alert when reaching % of budget
track_by_provider = true    # Track costs per provider
show_cost_warnings = true   # Show warnings in TUI

# MCP (Model Context Protocol) Integration
[mcp]
timeout = "30s"             # MCP server communication timeout
debug = false               # Enable MCP debug logging
auto_restart = true         # Restart failed servers automatically
auto_install = false        # Auto-install recommended servers
registry_url = "https://mcp-registry.aircher.ai"

[mcp.permissions]
filesystem_allowed_paths = ["."]              # Allowed filesystem paths
filesystem_readonly_paths = [".git", "node_modules"]  # Read-only paths
require_confirmation = [                       # Actions requiring confirmation
    "file_write", 
    "file_delete", 
    "git_push", 
    "process_execute"
]

# Built-in MCP Servers
[[mcp.servers]]
name = "filesystem"
command = "npx"
args = ["-y", "@modelcontextprotocol/server-filesystem"]
transport = "stdio"
scope = "local"              # local, project, user
enabled = true

[[mcp.servers]]
name = "git"
command = "npx"
args = ["-y", "@modelcontextprotocol/server-git"]
transport = "stdio"
scope = "project"
enabled = true

[[mcp.servers]]
name = "github"
command = "npx"
args = ["-y", "@modelcontextprotocol/server-github"]
transport = "stdio"
scope = "user"
env = { "GITHUB_PERSONAL_ACCESS_TOKEN" = "$GITHUB_TOKEN" }
enabled = false              # Requires API token

# Security Settings
[security]
require_confirmation = [     # Actions requiring user confirmation
    "file_delete",
    "git_push", 
    "process_execute",
    "network_request"
]
sandbox_mode = false         # Run in sandboxed mode
max_file_size = "10MB"       # Maximum file size to process
allowed_extensions = [       # Allowed file extensions
    ".txt", ".md", ".go", ".js", ".py", ".rs", ".java", 
    ".c", ".cpp", ".h", ".json", ".yaml", ".toml"
]

# TUI-Specific Keyboard Shortcuts
[interface.shortcuts]
toggle_help = "ctrl+h"       # Toggle help panel
toggle_context = "ctrl+t"    # Toggle context panel  
quit = "ctrl+c"              # Exit application
clear_conversation = "ctrl+l" # Clear conversation
search_mode = "ctrl+s"       # Enter search mode
thinking_mode = "ctrl+shift+t" # Toggle thinking mode

# Advanced TUI Theming
[interface.theme]
primary_color = "#7C3AED"    # Purple - main accent
secondary_color = "#10B981"  # Green - success/assistant
accent_color = "#F59E0B"     # Orange - warnings/costs
error_color = "#EF4444"      # Red - errors
muted_color = "#6B7280"      # Gray - secondary text
background_color = "#1F2937" # Dark background
border_color = "#374151"     # Border color

[interface.animations]
typing_speed = "fast"        # slow, medium, fast, instant
fade_in_duration = "200ms"   # Panel fade-in time
scroll_animation = true      # Smooth scrolling
progress_indicators = true   # Show progress bars
pulse_thinking = true        # Pulse thinking indicator