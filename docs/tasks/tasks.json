{
  "priorities": {
    "next_sequence": [
      "TUI-001",
      "TUI-002",
      "INTEGRATION-001",
      "SPRINT-004"
    ],
    "current_focus": "Working User Interface - Priority: TUI implementation, then integration testing, then advanced features"
  },
  "project": {
    "name": "Aircher",
    "description": "Advanced AI terminal assistant with intelligent context management",
    "version": "0.1.0-dev",
    "technology_stack": [
      "Rust 1.80+",
      "Ratatui TUI",
      "SQLite + sqlx",
      "tree-sitter",
      "git2",
      "tiktoken-rs",
      "tracing"
    ],
    "last_updated": "January 2025",
    "current_phase": "Phase 0 (Working User Interface)",
    "architecture": "Pure Rust Single Binary"
  },
  "metrics": {
    "phase_progress": {
      "phase_0_user_interface": 75,
      "phase_1_foundation": 100,
      "phase_2_providers": 70,
      "phase_3_intelligence": 0,
      "phase_4_advanced_features": 0
    },
    "quality_targets": {
      "test_coverage_goal": 80,
      "performance_target": "< 100ms startup, < 50ms response",
      "memory_usage_limit": "< 50MB baseline, < 200MB with context"
    }
  },
  "tasks": {
    "PHASE1-001": {
      "title": "Project Infrastructure",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Initialize Rust project with proper structure and tooling",
      "acceptance_criteria": [
        "Initialize Rust project with proper Cargo.toml structure",
        "Set up Cargo build system with comprehensive commands",
        "Establish project directory structure following Rust standards"
      ]
    },
    "PHASE1-002": {
      "title": "Configuration System",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Design hierarchical TOML configuration system",
      "acceptance_criteria": [
        "Design hierarchical TOML configuration system",
        "Support Provider → Model → Host selection hierarchy"
      ]
    },
    "PHASE1-003": {
      "title": "Multi-Database Architecture",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Implement separate SQLite databases for different data types",
      "acceptance_criteria": [
        "Design separate databases (conversations, knowledge, file_index, sessions)",
        "Integrate sqlx for type-safe async database operations"
      ]
    },
    "PHASE1-004": {
      "title": "Terminal User Interface (TUI)",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Build responsive TUI framework with Ratatui",
      "acceptance_criteria": [
        "Implement Ratatui TUI framework with async support",
        "Provider → Model → Host selection modal design",
        "Build modular component system (chat, selection, status)"
      ]
    },
    "SPRINT-001": {
      "id": "SPRINT-001",
      "title": "Claude API Provider Implementation",
      "status": "completed",
      "priority": "critical",
      "description": "Complete Anthropic API integration with streaming support - PRIORITY #1",
      "files": [
        "src/providers/claude_api.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async Anthropic API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Anthropic-specific errors and rate limiting",
        "Support multiple Claude models (Claude-3.5-Sonnet, Claude-3-Haiku, Claude-3-Opus)",
        "Implement accurate token counting for per-token cost management",
        "API key authentication with environment variable support"
      ],
      "dependencies": [],
      "estimated_effort": "large",
      "notes": "✅ Core Rust project structure implemented\n✅ Claude API provider implemented with async/streaming support\n✅ Configuration system with TOML support\n✅ Provider → Model → Host hierarchy designed\n✅ Basic error handling and logging\n⏳ Next: Add TUI implementation and testing"
    },
    "SPRINT-001B": {
      "id": "SPRINT-001B",
      "title": "Claude Pro/Max Subscription Integration",
      "status": "pending",
      "priority": "high",
      "description": "Integrate Claude Pro/Max subscription usage like Claude Code - requires client registration",
      "files": [
        "src/providers/claude_subscription.rs",
        "src/providers/mod.rs",
        "src/ui/usage.rs"
      ],
      "acceptance_criteria": [
        "Implement session-based authentication for Claude Pro/Max subscriptions",
        "Track usage against subscription limits (not token costs)",
        "Display usage like Claude Code: '44k/200k' style indicators",
        "Support Pro vs Max tier detection and different usage limits",
        "Handle subscription renewal and limit reset cycles",
        "Warning notifications when approaching usage limits",
        "Graceful fallback when subscription limits exceeded"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large",
      "notes": "Requires Anthropic client registration - cannot complete without this step"
    },
    "SPRINT-002": {
      "id": "SPRINT-002",
      "title": "Gemini Provider Implementation",
      "status": "completed",
      "priority": "high",
      "description": "Complete Google Gemini API integration with streaming support",
      "files": [
        "src/providers/gemini.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async Gemini API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Google AI-specific errors and rate limiting",
        "Support multiple Gemini models (Gemini-2.0-Flash, Gemini-1.5-Pro, etc.)",
        "Implement accurate token counting for cost management"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete Gemini API provider implementation with async/streaming support\\n✅ Integration with Provider → Model → Host hierarchy\\n✅ Configuration system with multiple Gemini models\\n✅ Error handling and proper cost calculation\\n✅ Streaming implementation with chunked response processing\\n⏳ Next: Move to SPRINT-003 (OpenRouter Host Integration)"
    },
    "SPRINT-003": {
      "id": "SPRINT-003",
      "title": "Host Integration (OpenRouter)",
      "status": "completed",
      "priority": "high",
      "description": "Implement OpenRouter host integration for cost optimization",
      "files": [
        "src/providers/hosts.rs",
        "src/config/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement OpenRouter API client integration",
        "Support Provider → Model → Host selection in UI",
        "Real-time cost comparison between Direct API vs OpenRouter",
        "Dynamic pricing updates and cost optimization suggestions",
        "Fallback mechanisms when hosts are unavailable"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Complete OpenRouter host implementation with async/streaming support\\n✅ Integration with Provider → Model → Host hierarchy\\n✅ Configuration system with OpenRouter host\\n✅ Model discovery and dynamic pricing support\\n✅ Cost comparison and optimization features\\n✅ Streaming implementation with SSE parsing\\n⏳ Next: Move to SPRINT-004 (Pure Rust Intelligence Engine)"
    },
    "SPRINT-004": {
      "id": "SPRINT-004",
      "title": "Pure Rust Intelligence Engine - Core",
      "status": "pending",
      "priority": "high",
      "description": "Implement core intelligence components in Pure Rust",
      "files": [
        "src/intelligence/analyzer.rs",
        "src/intelligence/scorer.rs",
        "src/intelligence/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement ProjectAnalyzer using tree-sitter for AST parsing",
        "Implement FileRelevanceScorer using git2 and heuristics",
        "Implement ContextOptimizer for smart conversation truncation",
        "Integrate with SQLite for pattern tracking and analytics",
        "Git status analysis and recent edits tracking"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large"
    },
    "SPRINT-005": {
      "id": "SPRINT-005",
      "title": "Session Management and Persistence",
      "status": "pending",
      "priority": "medium",
      "description": "Implement conversation persistence and session management",
      "files": [
        "src/sessions/mod.rs",
        "src/storage/conversations.rs"
      ],
      "acceptance_criteria": [
        "Save and restore conversation sessions",
        "Session search and organization",
        "Export conversations to various formats",
        "Session cost tracking and analytics",
        "Resume interrupted conversations"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-006": {
      "id": "SPRINT-006",
      "title": "OpenAI Provider Implementation",
      "status": "pending",
      "priority": "high",
      "description": "Complete OpenAI API integration with streaming support",
      "files": [
        "src/providers/openai.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async OpenAI API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle OpenAI-specific errors and rate limiting",
        "Support multiple OpenAI models (GPT-4o, GPT-4o-mini, o1-preview, etc.)",
        "Implement accurate token counting for cost management"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "large"
    },
    "SPRINT-007": {
      "id": "SPRINT-007",
      "title": "Ollama Local Provider Implementation",
      "status": "pending",
      "priority": "medium",
      "description": "Complete Ollama local model integration",
      "files": [
        "src/providers/ollama.rs",
        "src/providers/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement async Ollama API client for local communication",
        "Support streaming responses from local models",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Ollama-specific connection and model management",
        "Support model discovery and health checking",
        "Implement free cost tracking (local models)"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-008": {
      "id": "SPRINT-008",
      "title": "Cost Optimization and Tracking",
      "status": "pending",
      "priority": "medium",
      "description": "Comprehensive cost management and optimization",
      "files": [
        "src/intelligence/cost.rs",
        "src/providers/pricing.rs"
      ],
      "acceptance_criteria": [
        "Real-time cost tracking per provider/model/host",
        "Budget alerts and spending limits",
        "Task-specific model recommendations for cost optimization",
        "Usage analytics and cost projection",
        "Automatic model downgrading when approaching limits"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002",
        "SPRINT-003"
      ],
      "estimated_effort": "medium"
    },
    "CLI-001": {
      "id": "CLI-001",
      "title": "Basic CLI Functionality",
      "status": "completed",
      "priority": "critical",
      "description": "Create a working CLI that can handle one-shot chat requests",
      "files": [
        "src/cli/mod.rs",
        "src/main.rs",
        "src/app/mod.rs"
      ],
      "acceptance_criteria": [
        "Handle command line arguments with clap",
        "Support basic usage: aircher 'hello world'",
        "Return response from Claude API (single provider focus)",
        "Graceful error handling for missing API keys",
        "Simple configuration loading (API key from env)",
        "Basic help and version information",
        "Exit codes for success/failure scenarios"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "small",
      "notes": "✅ Working CLI with clap argument parsing\\n✅ One-shot mode: aircher 'message'\\n✅ Help and version commands\\n✅ Graceful error handling for missing API keys\\n✅ Clean error messages without panic traces\\n✅ Provider and model selection flags\\n✅ Lazy provider loading (only when needed)\\n⏳ Next: CLI-002 (Interactive Chat Mode)"
    },
    "CLI-002": {
      "id": "CLI-002", 
      "title": "Interactive CLI Chat Mode",
      "status": "completed",
      "priority": "high",
      "description": "Add interactive chat mode for back-and-forth conversations",
      "files": [
        "src/cli/interactive.rs",
        "src/cli/mod.rs"
      ],
      "acceptance_criteria": [
        "Interactive mode: aircher (no arguments)",
        "Conversation loop with > prompt",
        "Message history within session",
        "Ctrl+C to exit gracefully",
        "Basic commands: /help, /quit, /clear",
        "Show token usage and cost after each response",
        "Support for different models: --model flag"
      ],
      "dependencies": [
        "CLI-001"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Complete interactive CLI chat mode implementation\\n✅ Conversation loop with > prompt\\n✅ Message history within session\\n✅ Commands: /help, /quit, /clear, /history, /model\\n✅ Token usage and cost display\\n✅ Support for different models and providers\\n✅ Graceful error handling\\n⏳ Next: TUI-001 (Basic TUI Chat Interface)"
    },
    "TUI-001": {
      "id": "TUI-001",
      "title": "Basic TUI Chat Interface",
      "status": "completed", 
      "priority": "high",
      "description": "Implement a working TUI for richer chat experience",
      "files": [
        "src/ui/chat.rs",
        "src/ui/components/mod.rs",
        "src/ui/mod.rs"
      ],
      "acceptance_criteria": [
        "Replace placeholder TUI with working Ratatui interface",
        "Chat area showing conversation history",
        "Input box for typing messages",
        "Status bar showing current model and cost",
        "Keyboard shortcuts: Enter to send, Ctrl+C to quit",
        "Scrollable chat history",
        "Responsive layout for different terminal sizes"
      ],
      "dependencies": [
        "CLI-002"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete TUI implementation with Ratatui framework\\n✅ Working chat interface with conversation history\\n✅ Input box with real-time typing\\n✅ Status bar showing provider, model, cost, and tokens\\n✅ Keyboard shortcuts: Enter to send, Ctrl+C to quit, Up/Down to scroll\\n✅ Responsive layout with proper terminal UI components\\n✅ Clean error handling and graceful shutdown\\n✅ CLI integration with --tui flag\\n⏳ Next: TUI-002 (Model Selection & Settings)"
    },
    "TUI-002": {
      "id": "TUI-002",
      "title": "TUI Model Selection & Settings",
      "status": "pending",
      "priority": "medium", 
      "description": "Add model selection and configuration UI to TUI",
      "files": [
        "src/ui/selection.rs",
        "src/ui/settings.rs",
        "src/ui/mod.rs"
      ],
      "acceptance_criteria": [
        "Model selection modal: Tab to open, list available models",
        "Provider selection: Claude, Gemini, OpenRouter",
        "Settings panel for API keys and preferences", 
        "Cost tracking display and budget warnings",
        "Keyboard navigation for all UI elements",
        "Help panel with keyboard shortcuts",
        "Configuration persistence across sessions"
      ],
      "dependencies": [
        "TUI-001"
      ],
      "estimated_effort": "large",
      "notes": "This leverages our provider architecture but focuses on usability"
    },
    "INTEGRATION-001": {
      "id": "INTEGRATION-001",
      "title": "Provider Integration Testing",
      "status": "pending",
      "priority": "medium",
      "description": "Test and fix our provider implementations with real usage",
      "files": [
        "tests/integration/providers.rs",
        "src/providers/*/mod.rs"
      ],
      "acceptance_criteria": [
        "Integration tests for Claude, Gemini, OpenRouter",
        "Error handling verification with invalid API keys",
        "Streaming response testing",
        "Cost calculation accuracy testing",
        "Provider fallback mechanisms",
        "Health check validation",
        "Load testing for concurrent requests"
      ],
      "dependencies": [
        "TUI-001"
      ],
      "estimated_effort": "medium",
      "notes": "Validate our complex provider system actually works reliably"
    }
  }
}
