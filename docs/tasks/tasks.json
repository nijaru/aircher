{
  "priorities": {
    "next_sequence": [
      "SPRINT-001",
      "SPRINT-001B",
      "SPRINT-002",
      "SPRINT-003"
    ],
    "current_focus": "LLM Provider Integration - Priority: Claude API, Claude Pro/Max subscriptions, then Gemini, OpenRouter, OpenAI, Ollama"
  },
  "project": {
    "name": "Aircher",
    "description": "Advanced AI terminal assistant with intelligent context management",
    "version": "0.1.0-dev",
    "technology_stack": [
      "Rust 1.80+",
      "Ratatui TUI",
      "SQLite + sqlx",
      "tree-sitter",
      "git2",
      "tiktoken-rs",
      "tracing"
    ],
    "last_updated": "January 2025",
    "current_phase": "Phase 2 (LLM Provider Integration)",
    "architecture": "Pure Rust Single Binary"
  },
  "metrics": {
    "phase_progress": {
      "phase_1_foundation": 100,
      "phase_2_providers": 30,
      "phase_3_intelligence": 0,
      "phase_4_advanced_features": 0
    },
    "quality_targets": {
      "test_coverage_goal": 80,
      "performance_target": "< 100ms startup, < 50ms response",
      "memory_usage_limit": "< 50MB baseline, < 200MB with context"
    }
  },
  "tasks": {
    "PHASE1-001": {
      "title": "Project Infrastructure",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Initialize Rust project with proper structure and tooling",
      "acceptance_criteria": [
        "Initialize Rust project with proper Cargo.toml structure",
        "Set up Cargo build system with comprehensive commands",
        "Establish project directory structure following Rust standards"
      ]
    },
    "PHASE1-002": {
      "title": "Configuration System",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Design hierarchical TOML configuration system",
      "acceptance_criteria": [
        "Design hierarchical TOML configuration system",
        "Support Provider → Model → Host selection hierarchy"
      ]
    },
    "PHASE1-003": {
      "title": "Multi-Database Architecture",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Implement separate SQLite databases for different data types",
      "acceptance_criteria": [
        "Design separate databases (conversations, knowledge, file_index, sessions)",
        "Integrate sqlx for type-safe async database operations"
      ]
    },
    "PHASE1-004": {
      "title": "Terminal User Interface (TUI)",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Build responsive TUI framework with Ratatui",
      "acceptance_criteria": [
        "Implement Ratatui TUI framework with async support",
        "Provider → Model → Host selection modal design",
        "Build modular component system (chat, selection, status)"
      ]
    },
    "SPRINT-001": {
      "id": "SPRINT-001",
      "title": "Claude API Provider Implementation",
      "status": "in_progress",
      "priority": "critical",
      "description": "Complete Anthropic API integration with streaming support - PRIORITY #1",
      "files": [
        "src/providers/claude_api.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async Anthropic API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Anthropic-specific errors and rate limiting",
        "Support multiple Claude models (Claude-3.5-Sonnet, Claude-3-Haiku, Claude-3-Opus)",
        "Implement accurate token counting for per-token cost management",
        "API key authentication with environment variable support"
      ],
      "dependencies": [],
      "estimated_effort": "large"
    },
    "SPRINT-001B": {
      "id": "SPRINT-001B",
      "title": "Claude Pro/Max Subscription Integration",
      "status": "pending",
      "priority": "high",
      "description": "Integrate Claude Pro/Max subscription usage like Claude Code - requires client registration",
      "files": [
        "src/providers/claude_subscription.rs",
        "src/providers/mod.rs",
        "src/ui/usage.rs"
      ],
      "acceptance_criteria": [
        "Implement session-based authentication for Claude Pro/Max subscriptions",
        "Track usage against subscription limits (not token costs)",
        "Display usage like Claude Code: '44k/200k' style indicators",
        "Support Pro vs Max tier detection and different usage limits",
        "Handle subscription renewal and limit reset cycles",
        "Warning notifications when approaching usage limits",
        "Graceful fallback when subscription limits exceeded"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large",
      "estimated_effort": "large",
      "notes": "Requires Anthropic client registration - cannot complete without this step"
    },
    "SPRINT-002": {
      "id": "SPRINT-002",
      "title": "Gemini Provider Implementation",
      "status": "pending",
      "priority": "high",
      "description": "Complete Google Gemini API integration with streaming support",
      "files": [
        "src/providers/gemini.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async Gemini API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Google AI-specific errors and rate limiting",
        "Support multiple Gemini models (Gemini-2.0-Flash, Gemini-1.5-Pro, etc.)",
        "Implement accurate token counting for cost management"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large"
    },
    "SPRINT-003": {
      "id": "SPRINT-003",
      "title": "Host Integration (OpenRouter)",
      "status": "pending",
      "priority": "high",
      "description": "Implement OpenRouter host integration for cost optimization",
      "files": [
        "src/providers/hosts.rs",
        "src/config/hosts.rs"
      ],
      "acceptance_criteria": [
        "Implement OpenRouter API client integration",
        "Support Provider → Model → Host selection in UI",
        "Real-time cost comparison between Direct API vs OpenRouter",
        "Dynamic pricing updates and cost optimization suggestions",
        "Fallback mechanisms when hosts are unavailable"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-004": {
      "id": "SPRINT-004",
      "title": "Pure Rust Intelligence Engine - Core",
      "status": "pending",
      "priority": "high",
      "description": "Implement core intelligence components in Pure Rust",
      "files": [
        "src/intelligence/analyzer.rs",
        "src/intelligence/scorer.rs",
        "src/intelligence/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement ProjectAnalyzer using tree-sitter for AST parsing",
        "Implement FileRelevanceScorer using git2 and heuristics",
        "Implement ContextOptimizer for smart conversation truncation",
        "Integrate with SQLite for pattern tracking and analytics",
        "Git status analysis and recent edits tracking"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large"
    },
    "SPRINT-005": {
      "id": "SPRINT-005",
      "title": "Session Management and Persistence",
      "status": "pending",
      "priority": "medium",
      "description": "Implement conversation persistence and session management",
      "files": [
        "src/sessions/mod.rs",
        "src/storage/conversations.rs"
      ],
      "acceptance_criteria": [
        "Save and restore conversation sessions",
        "Session search and organization",
        "Export conversations to various formats",
        "Session cost tracking and analytics",
        "Resume interrupted conversations"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-006": {
      "id": "SPRINT-006",
      "title": "OpenAI Provider Implementation",
      "status": "pending",
      "priority": "high",
      "description": "Complete OpenAI API integration with streaming support",
      "files": [
        "src/providers/openai.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async OpenAI API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle OpenAI-specific errors and rate limiting",
        "Support multiple OpenAI models (GPT-4o, GPT-4o-mini, o1-preview, etc.)",
        "Implement accurate token counting for cost management"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "large"
    },
    "SPRINT-007": {
      "id": "SPRINT-007",
      "title": "Ollama Local Provider Implementation",
      "status": "pending",
      "priority": "medium",
      "description": "Complete Ollama local model integration",
      "files": [
        "src/providers/ollama.rs",
        "src/providers/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement async Ollama API client for local communication",
        "Support streaming responses from local models",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Ollama-specific connection and model management",
        "Support model discovery and health checking",
        "Implement free cost tracking (local models)"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-008": {
      "id": "SPRINT-008",
      "title": "Cost Optimization and Tracking",
      "status": "pending",
      "priority": "medium",
      "description": "Comprehensive cost management and optimization",
      "files": [
        "src/intelligence/cost.rs",
        "src/providers/pricing.rs"
      ],
      "acceptance_criteria": [
        "Real-time cost tracking per provider/model/host",
        "Budget alerts and spending limits",
        "Task-specific model recommendations for cost optimization",
        "Usage analytics and cost projection",
        "Automatic model downgrading when approaching limits"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002",
        "SPRINT-003"
      ],
      "estimated_effort": "medium"
    }
  }
}
