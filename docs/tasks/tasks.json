{
  "priorities": {
    "next_sequence": [
      "SPRINT-007",
      "SPRINT-008",
      "SPRINT-001B",
      "SPRINT-010"
    ],
    "current_focus": "Advanced Features - Priority: Ollama provider, cost optimization, Claude Pro/Max auth, then intelligence learning"
  },
  "project": {
    "name": "Aircher",
    "description": "Advanced AI terminal assistant with intelligent context management",
    "version": "0.1.0-dev",
    "technology_stack": [
      "Rust 1.80+",
      "Ratatui TUI",
      "SQLite + sqlx",
      "tree-sitter",
      "git2",
      "tiktoken-rs",
      "tracing"
    ],
    "last_updated": "January 2025",
    "current_phase": "Phase 4 (Advanced Features)",
    "architecture": "Pure Rust Single Binary"
  },
  "metrics": {
    "phase_progress": {
      "phase_0_user_interface": 100,
      "phase_1_foundation": 100,
      "phase_2_providers": 95,
      "phase_3_intelligence": 90,
      "phase_4_advanced_features": 75
    },
    "quality_targets": {
      "test_coverage_goal": 80,
      "performance_target": "< 100ms startup, < 50ms response",
      "memory_usage_limit": "< 50MB baseline, < 200MB with context"
    }
  },
  "tasks": {
    "PHASE1-001": {
      "title": "Project Infrastructure",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Initialize Rust project with proper structure and tooling",
      "acceptance_criteria": [
        "Initialize Rust project with proper Cargo.toml structure",
        "Set up Cargo build system with comprehensive commands",
        "Establish project directory structure following Rust standards"
      ]
    },
    "PHASE1-002": {
      "title": "Configuration System",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Design hierarchical TOML configuration system",
      "acceptance_criteria": [
        "Design hierarchical TOML configuration system",
        "Support Provider → Model → Host selection hierarchy"
      ]
    },
    "PHASE1-003": {
      "title": "Multi-Database Architecture",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Implement separate SQLite databases for different data types",
      "acceptance_criteria": [
        "Design separate databases (conversations, knowledge, file_index, sessions)",
        "Integrate sqlx for type-safe async database operations"
      ]
    },
    "PHASE1-004": {
      "title": "Terminal User Interface (TUI)",
      "phase": "Phase 1: Foundation",
      "status": "completed",
      "priority": "critical",
      "description": "Build responsive TUI framework with Ratatui",
      "acceptance_criteria": [
        "Implement Ratatui TUI framework with async support",
        "Provider → Model → Host selection modal design",
        "Build modular component system (chat, selection, status)"
      ]
    },
    "SPRINT-001": {
      "id": "SPRINT-001",
      "title": "Claude API Provider Implementation",
      "status": "completed",
      "priority": "critical",
      "description": "Complete Anthropic API integration with streaming support - PRIORITY #1",
      "files": [
        "src/providers/claude_api.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async Anthropic API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Anthropic-specific errors and rate limiting",
        "Support multiple Claude models (Claude-3.5-Sonnet, Claude-3-Haiku, Claude-3-Opus)",
        "Implement accurate token counting for per-token cost management",
        "API key authentication with environment variable support"
      ],
      "dependencies": [],
      "estimated_effort": "large",
      "notes": "✅ Core Rust project structure implemented\n✅ Claude API provider implemented with async/streaming support\n✅ Configuration system with TOML support\n✅ Provider → Model → Host hierarchy designed\n✅ Basic error handling and logging\n⏳ Next: Add TUI implementation and testing"
    },
    "SPRINT-001B": {
      "id": "SPRINT-001B",
      "title": "Claude Pro/Max Subscription Integration",
      "status": "pending",
      "priority": "high",
      "description": "Integrate Claude Pro/Max subscription usage like Claude Code - requires client registration",
      "files": [
        "src/providers/claude_subscription.rs",
        "src/providers/mod.rs",
        "src/ui/usage.rs"
      ],
      "acceptance_criteria": [
        "Implement session-based authentication for Claude Pro/Max subscriptions",
        "Track usage against subscription limits (not token costs)",
        "Display usage like Claude Code: '44k/200k' style indicators",
        "Support Pro vs Max tier detection and different usage limits",
        "Handle subscription renewal and limit reset cycles",
        "Warning notifications when approaching usage limits",
        "Graceful fallback when subscription limits exceeded"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large",
      "notes": "✅ BREAKTHROUGH: OpenCode uses Claude Code's OAuth flow (shows 'claude code' in browser)\\n✅ Infrastructure ready: PricingModel::Subscription and SubscriptionTier enums\\n✅ No separate Anthropic registration needed - can reuse Claude Code OAuth client\\n🔄 Next: Research OpenCode's implementation of Claude Code OAuth flow\\n📋 Implementation approach: Mirror OpenCode's session-based auth system"
    },
    "SPRINT-002": {
      "id": "SPRINT-002",
      "title": "Gemini Provider Implementation",
      "status": "completed",
      "priority": "high",
      "description": "Complete Google Gemini API integration with streaming support",
      "files": [
        "src/providers/gemini.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async Gemini API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Google AI-specific errors and rate limiting",
        "Support multiple Gemini models (Gemini-2.0-Flash, Gemini-1.5-Pro, etc.)",
        "Implement accurate token counting for cost management"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete Gemini API provider implementation with async/streaming support\\n✅ Integration with Provider → Model → Host hierarchy\\n✅ Configuration system with multiple Gemini models\\n✅ Error handling and proper cost calculation\\n✅ Streaming implementation with chunked response processing\\n⏳ Next: Move to SPRINT-003 (OpenRouter Host Integration)"
    },
    "SPRINT-003": {
      "id": "SPRINT-003",
      "title": "Host Integration (OpenRouter)",
      "status": "completed",
      "priority": "high",
      "description": "Implement OpenRouter host integration for cost optimization",
      "files": [
        "src/providers/hosts.rs",
        "src/config/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement OpenRouter API client integration",
        "Support Provider → Model → Host selection in UI",
        "Real-time cost comparison between Direct API vs OpenRouter",
        "Dynamic pricing updates and cost optimization suggestions",
        "Fallback mechanisms when hosts are unavailable"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Complete OpenRouter host implementation with async/streaming support\\n✅ Integration with Provider → Model → Host hierarchy\\n✅ Configuration system with OpenRouter host\\n✅ Model discovery and dynamic pricing support\\n✅ Cost comparison and optimization features\\n✅ Streaming implementation with SSE parsing\\n⏳ Next: Move to SPRINT-004 (Pure Rust Intelligence Engine)"
    },
    "SPRINT-004": {
      "id": "SPRINT-004",
      "title": "Intelligence Engine - Contextual Development Assistant",
      "status": "completed",
      "priority": "high",
      "description": "Implement context-aware development assistant that provides intelligent insights for AI agents",
      "files": [
        "src/intelligence/mod.rs",
        "src/intelligence/context.rs",
        "src/intelligence/narrative.rs",
        "src/intelligence/memory.rs",
        "src/intelligence/tools.rs"
      ],
      "acceptance_criteria": [
        "Implement tool-based interface for AI agent integration",
        "Build contextual relevance engine with multi-layered scoring",
        "Create development narrative tracker for project story",
        "Implement basic conversational memory system",
        "Add predictive context assembly capabilities",
        "Integrate with git2 for development momentum tracking",
        "Use tree-sitter for AST analysis and dependency mapping",
        "Store learning models in SQLite for pattern recognition",
        "Provide dynamic system prompt component integration",
        "Achieve <100ms response time for context queries"
      ],
      "dependencies": [
        "TUI-001",
        "INTEGRATION-001"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete Intelligence Engine implementation with tool-based interface\\n✅ Multi-layered contextual relevance scoring (immediate/sequential/dependent/reference/historical)\\n✅ Development narrative tracking with git history analysis\\n✅ Conversational memory system for learning from outcomes\\n✅ Project momentum analysis and architecture direction detection\\n✅ File discovery and impact analysis with dependency tracking\\n✅ Context suggestions and missing dependency identification\\n✅ Thread-safe implementation with Arc<Mutex<Repository>> for git integration\\n✅ Comprehensive test suite with 4 passing tests\\n✅ Full integration with ConfigManager and DatabaseManager\\n⏳ Next: SPRINT-005 (Session Management and Persistence)"
    },
    "SPRINT-005": {
      "id": "SPRINT-005",
      "title": "Session Management and Persistence",
      "status": "completed",
      "priority": "medium",
      "description": "Implement conversation persistence and session management",
      "files": [
        "src/sessions/mod.rs",
        "src/storage/mod.rs",
        "src/project/mod.rs",
        "tests/session_tests.rs"
      ],
      "acceptance_criteria": [
        "Save and restore conversation sessions",
        "Session search and organization",
        "Export conversations to various formats (JSON, Markdown, CSV, Plain)",
        "Session cost tracking and analytics",
        "Resume interrupted conversations",
        "SQLite-based persistence with full CRUD operations",
        "CLI commands for session management",
        "Project-based session management with .aircher/ directories"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Complete session management implementation with SQLite persistence\\n✅ Full CRUD operations for sessions and messages\\n✅ Multi-format export capabilities (JSON, Markdown, CSV, Plain)\\n✅ Session analytics and cost tracking\\n✅ CLI integration with session commands\\n✅ Project-based session management with .aircher/ directory detection\\n✅ Comprehensive test suite with 12 test functions\\n✅ Integration with TUI and Intelligence Engine\\n⏳ Next: SPRINT-007 (Ollama Provider) or SPRINT-001B (Claude Pro/Max Auth)"
    },
    "SPRINT-006": {
      "id": "SPRINT-006",
      "title": "OpenAI Provider Implementation",
      "status": "completed",
      "priority": "high",
      "description": "Complete OpenAI API integration with streaming support",
      "files": [
        "src/providers/openai.rs",
        "src/providers/mod.rs",
        "src/ui/chat.rs"
      ],
      "acceptance_criteria": [
        "Implement async OpenAI API client with reqwest",
        "Support streaming responses with SSE parsing using tokio",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle OpenAI-specific errors and rate limiting",
        "Support multiple OpenAI models (GPT-4o, GPT-4o-mini, o1-preview, etc.)",
        "Implement accurate token counting for cost management"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete OpenAI API provider implementation with streaming support\\n✅ 7 OpenAI models (GPT-4o, GPT-4o-mini, GPT-4-turbo, GPT-4, GPT-3.5-turbo, o1-preview, o1-mini)\\n✅ Server-Sent Events (SSE) streaming with proper chunk processing\\n✅ Comprehensive cost calculation and pricing information\\n✅ Integration with Provider → Model → Host hierarchy\\n✅ Thread-safe implementation with proper error handling\\n✅ Comprehensive test suite with 9 unit tests and environment isolation\\n✅ Documentation updates to include OpenAI provider support\\n⏳ Next: SPRINT-005 (Session Management) or CLAUDE-003 (Pro/Max Integration)"
    },
    "SPRINT-007": {
      "id": "SPRINT-007",
      "title": "Ollama Local Provider Implementation",
      "status": "pending",
      "priority": "medium",
      "description": "Complete Ollama local model integration",
      "files": [
        "src/providers/ollama.rs",
        "src/providers/mod.rs"
      ],
      "acceptance_criteria": [
        "Implement async Ollama API client for local communication",
        "Support streaming responses from local models",
        "Integrate with Provider → Model → Host hierarchy",
        "Handle Ollama-specific connection and model management",
        "Support model discovery and health checking",
        "Implement free cost tracking (local models)"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-008": {
      "id": "SPRINT-008",
      "title": "Cost Optimization and Tracking",
      "status": "pending",
      "priority": "medium",
      "description": "Comprehensive cost management and optimization",
      "files": [
        "src/intelligence/cost.rs",
        "src/providers/pricing.rs"
      ],
      "acceptance_criteria": [
        "Real-time cost tracking per provider/model/host",
        "Budget alerts and spending limits",
        "Task-specific model recommendations for cost optimization",
        "Usage analytics and cost projection",
        "Automatic model downgrading when approaching limits"
      ],
      "dependencies": [
        "SPRINT-001",
        "SPRINT-002",
        "SPRINT-003"
      ],
      "estimated_effort": "medium"
    },
    "SPRINT-010": {
      "id": "SPRINT-010",
      "title": "Intelligence Engine - Learning System",
      "status": "pending",
      "priority": "medium",
      "description": "Advanced learning capabilities for the Intelligence Engine",
      "files": [
        "src/intelligence/learning.rs",
        "src/intelligence/patterns.rs",
        "src/intelligence/prediction.rs"
      ],
      "acceptance_criteria": [
        "Implement advanced conversational memory with outcome tracking",
        "Build pattern recognition system for successful context assemblies",
        "Add predictive context assembly with confidence scoring",
        "Create learning models that improve over time",
        "Implement cross-conversation learning patterns",
        "Add context effectiveness metrics and feedback loops",
        "Build automated context suggestion refinement",
        "Achieve 10% monthly improvement in relevance accuracy"
      ],
      "dependencies": [
        "SPRINT-004"
      ],
      "estimated_effort": "large",
      "notes": "Phase 2 of Intelligence Engine focusing on learning and prediction capabilities"
    },
    "SPRINT-015": {
      "id": "SPRINT-015",
      "title": "Intelligence Engine - Advanced Features",
      "status": "pending",
      "priority": "low",
      "description": "Advanced intelligence features for cross-project learning and architectural guidance",
      "files": [
        "src/intelligence/architectural.rs",
        "src/intelligence/cross_project.rs",
        "src/intelligence/guidance.rs"
      ],
      "acceptance_criteria": [
        "Implement cross-project intelligence and pattern sharing",
        "Add architectural guidance and refactoring suggestions",
        "Build real-time development assistance capabilities",
        "Create team intelligence for multi-developer patterns",
        "Implement automated documentation generation",
        "Add IDE integration capabilities",
        "Build CI/CD integration for context-aware code review"
      ],
      "dependencies": [
        "SPRINT-010"
      ],
      "estimated_effort": "large",
      "notes": "Phase 3 of Intelligence Engine with advanced cross-project and team features"
    },
    "CLI-001": {
      "id": "CLI-001",
      "title": "Basic CLI Functionality",
      "status": "completed",
      "priority": "critical",
      "description": "Create a working CLI that can handle one-shot chat requests",
      "files": [
        "src/cli/mod.rs",
        "src/main.rs",
        "src/app/mod.rs"
      ],
      "acceptance_criteria": [
        "Handle command line arguments with clap",
        "Support basic usage: aircher 'hello world'",
        "Return response from Claude API (single provider focus)",
        "Graceful error handling for missing API keys",
        "Simple configuration loading (API key from env)",
        "Basic help and version information",
        "Exit codes for success/failure scenarios"
      ],
      "dependencies": [
        "SPRINT-001"
      ],
      "estimated_effort": "small",
      "notes": "✅ Working CLI with clap argument parsing\\n✅ One-shot mode: aircher 'message'\\n✅ Help and version commands\\n✅ Graceful error handling for missing API keys\\n✅ Clean error messages without panic traces\\n✅ Provider and model selection flags\\n✅ Lazy provider loading (only when needed)\\n⏳ Next: CLI-002 (Interactive Chat Mode)"
    },
    "CLI-002": {
      "id": "CLI-002",
      "title": "Interactive CLI Chat Mode",
      "status": "completed",
      "priority": "high",
      "description": "Add interactive chat mode for back-and-forth conversations",
      "files": [
        "src/cli/interactive.rs",
        "src/cli/mod.rs"
      ],
      "acceptance_criteria": [
        "Interactive mode: aircher (no arguments)",
        "Conversation loop with > prompt",
        "Message history within session",
        "Ctrl+C to exit gracefully",
        "Basic commands: /help, /quit, /clear",
        "Show token usage and cost after each response",
        "Support for different models: --model flag"
      ],
      "dependencies": [
        "CLI-001"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Complete interactive CLI chat mode implementation\\n✅ Conversation loop with > prompt\\n✅ Message history within session\\n✅ Commands: /help, /quit, /clear, /history, /model\\n✅ Token usage and cost display\\n✅ Support for different models and providers\\n✅ Graceful error handling\\n⏳ Next: TUI-001 (Basic TUI Chat Interface)"
    },
    "TUI-001": {
      "id": "TUI-001",
      "title": "Basic TUI Chat Interface",
      "status": "completed",
      "priority": "high",
      "description": "Implement a working TUI for richer chat experience",
      "files": [
        "src/ui/chat.rs",
        "src/ui/components/mod.rs",
        "src/ui/mod.rs"
      ],
      "acceptance_criteria": [
        "Replace placeholder TUI with working Ratatui interface",
        "Chat area showing conversation history",
        "Input box for typing messages",
        "Status bar showing current model and cost",
        "Keyboard shortcuts: Enter to send, Ctrl+C to quit",
        "Scrollable chat history",
        "Responsive layout for different terminal sizes"
      ],
      "dependencies": [
        "CLI-002"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete TUI implementation with Ratatui framework\\n✅ Working chat interface with conversation history\\n✅ Input box with real-time typing\\n✅ Status bar showing provider, model, cost, and tokens\\n✅ Keyboard shortcuts: Enter to send, Ctrl+C to quit, Up/Down to scroll\\n✅ Responsive layout with proper terminal UI components\\n✅ Clean error handling and graceful shutdown\\n✅ CLI integration with --tui flag\\n⏳ Next: TUI-002 (Model Selection & Settings)"
    },
    "TUI-002": {
      "id": "TUI-002",
      "title": "TUI Model Selection & Settings",
      "status": "completed",
      "priority": "medium",
      "description": "Add model selection and configuration UI to TUI",
      "files": [
        "src/ui/selection.rs",
        "src/ui/settings.rs",
        "src/ui/mod.rs"
      ],
      "acceptance_criteria": [
        "Model selection modal: Tab to open, list available models",
        "Provider selection: Claude, Gemini, OpenRouter",
        "Settings panel for API keys and preferences",
        "Cost tracking display and budget warnings",
        "Keyboard navigation for all UI elements",
        "Help panel with keyboard shortcuts",
        "Configuration persistence across sessions"
      ],
      "dependencies": [
        "TUI-001"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete TUI Model Selection & Settings implementation\n✅ Model selection modal with Tab key to open\n✅ Provider selection with keyboard navigation\n✅ Settings panel for API keys and preferences (F2)\n✅ Cost tracking display and budget warnings\n✅ Comprehensive keyboard navigation for all UI elements\n✅ Help panel with keyboard shortcuts (F1)\n✅ Configuration persistence and real-time updates\n✅ All acceptance criteria met\n⏳ Next: INTEGRATION-001 (Provider Integration Testing)"
    },
    "INTEGRATION-001": {
      "id": "INTEGRATION-001",
      "title": "Provider Integration Testing",
      "status": "completed",
      "priority": "medium",
      "description": "Test and fix our provider implementations with real usage",
      "files": [
        "tests/integration/providers.rs",
        "src/providers/*/mod.rs"
      ],
      "acceptance_criteria": [
        "Integration tests for Claude, Gemini, OpenRouter",
        "Error handling verification with invalid API keys",
        "Streaming response testing",
        "Cost calculation accuracy testing",
        "Provider fallback mechanisms",
        "Health check validation",
        "Load testing for concurrent requests"
      ],
      "dependencies": [
        "TUI-001"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Comprehensive testing infrastructure implemented\n✅ Unit tests for configuration, providers, and message handling (19 tests passing)\n✅ Integration test framework with error handling validation\n✅ Provider initialization and health check testing\n✅ Cost calculation accuracy testing without API calls\n✅ Error handling verification with invalid API keys\n✅ Test structure: unit tests (fast), integration tests (with/without API keys)\n✅ Library structure added to Cargo.toml for testing\n✅ All acceptance criteria met for testing infrastructure\n⏳ Next: SPRINT-004 (Intelligence Engine Implementation)"
    },
    "TUI-INTEGRATION": {
      "id": "TUI-INTEGRATION",
      "title": "TUI Intelligence Engine Integration",
      "status": "completed",
      "priority": "high",
      "description": "Complete TUI integration with Intelligence Engine and Session Management",
      "files": [
        "src/ui/mod.rs",
        "src/intelligence/tui_tools.rs",
        "src/intelligence/file_monitor.rs",
        "src/project/mod.rs"
      ],
      "acceptance_criteria": [
        "Project detection and .aircher/ directory management",
        "Intelligence Engine tools interface for TUI integration",
        "Session management fully integrated into TUI workflow",
        "Background file monitoring and analysis system",
        "Context injection system for rich system prompts",
        "File tree walking and project scanning capabilities",
        "One session per project with automatic initialization"
      ],
      "dependencies": [
        "SPRINT-004",
        "SPRINT-005",
        "TUI-002"
      ],
      "estimated_effort": "large",
      "notes": "✅ Complete TUI integration with Intelligence Engine\\n✅ Project detection and .aircher/ directory management\\n✅ Intelligence Engine tools interface for TUI\\n✅ Session management integration into TUI workflow\\n✅ Background file monitoring and analysis\\n✅ Context injection system for rich system prompts\\n✅ File tree walking and project scanning capabilities\\n✅ One session per project with automatic initialization\\n✅ Comprehensive implementation ready for production use"
    },
    "TESTING-FRAMEWORK": {
      "id": "TESTING-FRAMEWORK",
      "title": "Comprehensive TUI Testing Framework",
      "status": "completed",
      "priority": "high",
      "description": "Implement dependency injection testing framework for TUI components",
      "files": [
        "src/testing/mod.rs",
        "tests/tui_integration_tests.rs",
        "docs/TESTING.md",
        "Cargo.toml"
      ],
      "acceptance_criteria": [
        "Dependency injection system with trait abstractions",
        "Mock implementations for all major components",
        "Integration tests for complete TUI workflows",
        "Session persistence and error handling validation",
        "Performance and multi-provider testing scenarios",
        "Testing framework documentation and examples"
      ],
      "dependencies": [
        "TUI-INTEGRATION",
        "SPRINT-005"
      ],
      "estimated_effort": "medium",
      "notes": "✅ Complete testing framework with dependency injection\\n✅ Mock implementations for providers, intelligence, and sessions\\n✅ Integration tests for complete TUI workflows\\n✅ Session persistence and error handling validation\\n✅ Performance and multi-provider testing scenarios\\n✅ Comprehensive documentation with examples\\n✅ Testing feature flag and trait abstractions\\n✅ All TUI code paths now testable without external dependencies"
    }
  }
}
